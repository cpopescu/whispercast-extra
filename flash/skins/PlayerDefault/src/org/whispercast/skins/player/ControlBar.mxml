<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:whispercast="org.whispercast.*"
		xmlns:whispercast_player="org.whispercast.player.*"
		xmlns:whispercast_osd="org.whispercast.osd.*"
		xmlns:whispercast_skins="org.whispercast.skins.player.player.*"
		creationComplete="onCreationComplete(event)"
		currentState="noProgress" styleName="controlBar">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("org.whispercast.player.ControlBar")]
	</fx:Metadata>

	<fx:Declarations>
		<s:Parallel id="progressTransition" duration="250">
			<s:Fade target="{progressBarGroup}"/>
			<s:Fade target="{timeGroup}"/>
		</s:Parallel>
	</fx:Declarations>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace whispercast "org.whispercast.*";
		@namespace whispercast_player "org.whispercast.player.*";
		@namespace whispercast_osd "org.whispercast.osd.*";
		@namespace whispercast_skins "org.whispercast.skins.player.*";
		
		* {
			backgroundAlpha: 1;
			
			foreColorLow: #6683cc;
			foreColorHigh: #99b3ff;
			
			backColorLow: #151515;
			backColorHigh: #353535;
			
			disabledColorLow: #808080;
			disabledColorHigh: #c0c0c0;
			
			selectedColorLow: #cc9000;
			selectedColorHigh: #ffc000;
			
			textColorLow: #909090;
			textColorHigh: #c0c0c0;
		}
	</fx:Style>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Menu;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.whispercast.player.*;
			
			protected function formatTime(time:Number):String
			{
				var h:Number = Math.floor(time/3600);
				time = time-3600*h;
				var m:Number = Math.floor(time/60);
				time = time-60*m;
				var s:Number = Math.floor(time);
				return h+":"+(m<10 ? "0":"")+m+":"+(s<10 ? "0":"")+s;
			}
			protected function formatTimeScrubBar(time:Number):String
			{
				var h:Number = Math.floor(time/3600);
				time = time-3600*h;
				var m:Number = Math.floor(time/60);
				time = time-60*m;
				var s:Number = Math.floor(time);
				time = Math.floor(1000*(time-s));
				return h+":"+(m<10 ? "0":"")+m+":"+(s<10 ? "0":"")+s+"."+(time<10 ? "00":(time<100 ? "0" : ""))+time ;
			}
			protected function formatVolumeVolumeBar(volume:Number):String
			{
				return Math.round(100*volume)+'';
			}
			
			protected function onCreationComplete(event:FlexEvent):void
			{
				hostComponent.setStyle('backgroundAlpha', scrubBar.getStyle('backgroundAlpha'));
				hostComponent.setStyle('foreColorLow', scrubBar.getStyle('foreColorLow'));
				hostComponent.setStyle('foreColorHigh', scrubBar.getStyle('foreColorHigh'));
				hostComponent.setStyle('backColorLow', scrubBar.getStyle('backColorLow'));
				hostComponent.setStyle('backColorHigh', scrubBar.getStyle('backColorHigh'));
				hostComponent.setStyle('selectedColorLow', scrubBar.getStyle('selectedColorLow'));
				hostComponent.setStyle('selectedColorHigh', scrubBar.getStyle('selectedColorHigh'));
				hostComponent.setStyle('textColorLow', scrubBar.getStyle('textColorLow'));
				hostComponent.setStyle('textColorHigh', scrubBar.getStyle('textColorHigh'));
				
				scrubBar.dataTipFormatFunction = formatTimeScrubBar;
				volumeBar.dataTipFormatFunction = formatVolumeVolumeBar;
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="noProgress" stateGroups="noProgressGroup"/>
		<s:State name="noTime" stateGroups="noTimeGroup"/>
		<s:State name="noProgressOrTime" stateGroups="noProgressGroup,noTimeGroup"/>
	</s:states>
	
	<s:transitions>
		<s:Transition effect="{progressTransition}"/>
	</s:transitions>
	
	<s:Group id="controlBar" width="100%">
		<s:Rect left="0" top="0" right="0" bottom="0">
			<s:fill>
				<s:SolidColor color="{getStyle('backColorLow')}" alpha="{getStyle('backgroundAlpha')}"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5" gap="10">
			<s:Label text="{getStyle('backgroundAlpha')}"/>
			<!-- Play/Stop  button -->
			<s:ToggleButton id="playAndStop" enabled="{hostComponent.output.url != null}" label="{hostComponent.output.isPlaying ? 'Stop' : 'Play'}" width="22" height="22" skinClass="org.whispercast.skins.player.PlayButton" buttonMode="true" selected="{hostComponent.output.isPlaying &amp;&amp; !hostComponent.output.isPausing}"/>
			<s:HGroup width="100%">
				<s:Group id="progressBarGroup" width="100%" height="20" visible.noProgressGroup="false">
					<!-- Progress bar -->
					<s:Group width="100%" height="100%">
						<s:Group left="1" top="1" bottom="1" right="1">
							<!-- Progress bar background -->
							<s:Rect width="100%" height="100%">
								<s:fill>
									<s:SolidColor color="{getStyle('backColorLow')}" alpha="{getStyle('backgroundAlpha')}"/>
								</s:fill>
							</s:Rect>
							<!-- Progress bar progress -->
							<s:Group id="progressBar" width="100%" height="100%">
								<s:Rect left="0" top="0" right="0" bottom="0">
									<s:fill>
										<s:SolidColor color="{getStyle('foreColorLow')}"/>
									</s:fill>
								</s:Rect>
							</s:Group>
						</s:Group>
						<whispercast:HSliderBar id="scrubBar" width="100%" height="100%" minimum="0" maximum="{hostComponent.output.duration}" snapInterval="0" slideDuration="0" liveDragging="false" visible="{hostComponent.output.seekable}" enabled="{hostComponent.output.isPlaying &amp;&amp; hostComponent.output.seekable}" updateOnMouseDown="true" skinClass="org.whispercast.skins.player.ScrubBar"/>
					</s:Group>
					<!-- Progress bar border -->
					<s:Rect width="100%" height="100%" alpha="{0.5*getStyle('backgroundAlpha')}">
						<s:stroke>
							<s:LinearGradientStroke rotation="90" weight="1" pixelHinting="true">
								<s:GradientEntry color="{getStyle('backColorLow')}"/>
								<s:GradientEntry color="{getStyle('backColorHigh')}"/>
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>
				</s:Group>
				<!-- Controls -->
				<s:HGroup>
					<s:Group id="timeGroup" visible="true" visible.noTimeGroup="false">
						<!-- Time background -->
						<s:Rect left="1" top="1" right="1" bottom="1">
							<s:fill>
								<s:SolidColor color="{getStyle('backColorLow')}" alpha="{getStyle('backgroundAlpha')}"/>
							</s:fill>
						</s:Rect>
						<!-- Time -->
						<s:HGroup height="20" verticalAlign="middle" gap="0">
							<s:Label id="time" text="-:--:--" lineBreak="explicit" width="42" textAlign="right" fontSize="11" color="{getStyle('textColorHigh')}"/>
							<s:Label text="/" lineBreak="explicit" width="7" textAlign="center" fontSize="11" color="{getStyle('textColorLow')}"/>
							<s:Label id="duration" text="-:--:--" lineBreak="explicit" width="43" textAlign="left" fontSize="11" color="{getStyle('textColorHigh')}"/>
						</s:HGroup>
						<!-- Time border -->
						<s:Rect width="100%" height="100%" alpha="{0.5*getStyle('backgroundAlpha')}">
							<s:stroke>
								<s:LinearGradientStroke rotation="90" weight="1" pixelHinting="true">
									<s:GradientEntry color="{getStyle('backColorLow')}"/>
									<s:GradientEntry color="{getStyle('backColorHigh')}"/>
								</s:LinearGradientStroke>
							</s:stroke>
						</s:Rect>
					</s:Group>
					<!-- Volume + mute button -->
					<s:HGroup gap="-4" verticalAlign="middle">
						<s:ToggleButton id="mute" toolTip="Mute" width="20" height="20" label="Mute" buttonMode="true" selected="{hostComponent.output.muted}" skinClass="org.whispercast.skins.player.MuteButton"/>
						<whispercast:HSliderBar id="volumeBar" width="40" height="18" minimum="0" maximum="1" slideDuration="0" value="{hostComponent.output.volume}" snapInterval="0" showDataTip="false" skinClass="org.whispercast.skins.player.VolumeBar"/>
					</s:HGroup>
					<!-- Switch button -->
					<s:ToggleButton id="toggleSecondary" toolTip="Toggle Picture-In-Picture" skinClass="org.whispercast.skins.player.ToggleButton" buttonMode="true" enabled="{parentApplication.isSecondaryAvailable}" selected="{!parentApplication.isSecondaryVisible}"/>
					<!-- Fullscreen button -->
					<s:ToggleButton id="fullScreen" toolTip="Toggle Fullscreen" skinClass="org.whispercast.skins.player.FullscreenButton" buttonMode="true" selected="{parentApplication.isFullscreen}"/>
				</s:HGroup>
			</s:HGroup>
		</s:HGroup>
		<s:Rect width="100%" height="100%">
			<s:stroke>
				<s:LinearGradientStroke rotation="90" weight="1" pixelHinting="true">
					<s:GradientEntry color="{getStyle('backColorHigh')}" alpha="{0.8*getStyle('backgroundAlpha')}"/>
					<s:GradientEntry color="{getStyle('backColorLow')}" alpha="{0.8*getStyle('backgroundAlpha')}"/>
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>
	</s:Group>
</s:Skin>
