//
// Author: Cosmin Tudorache

//NOTE:
// The TranscodingStatus is defined in "status.rpc".
// You have to process both "status.rpc" and "manager.rpc" at once.

// This structure travels between slave->master.
Type FileState {
  // file identifier. 
  // Can be "" (invalid) (e.g. on file NOT_FOUND) 
  string id_;

  // FileState codes:
  //  "Pending" - the file is pending on Slave (the slave is busy)
  //  "Processing" - the file is being processed on Slave
  //  "SlaveReady" - the result files are ready on the slave
  //  "Distributing" - the master copies results between output dirs
  //  "Done" - result files are ready in all output dirs (FINAL STATE)
  //  "Error" - something went wrong, see error_ for description
  string state_;
  
  // May indicate an error description.
  // If state_ is not an error, this is empty (""); 
  string error_;

  // Path to ouput (transcoded) files if state_ == "SlaveReady",
  // else this is empty. This path is on the slave.
  string output_dir_;

  // the transcoding progress & status for the input file.
  TranscodingStatus transcoding_status_;
}

Service SlaveManager {
  //  Copy file from remote "file_path", transcode it and
  //   report back status.
  //  Announce progress with RPC MasterManager::NotifyStateChange 
  //   using ip/port/protocol/path/codec from "master_uri".
  //   If IP is 0.0.0.0, use IP from the transport layer of current rpc.
  // file_path: file path on master. Does not contain IP.
  //            You have to obtain IP from transport.
  //            e.g.  "user@0.0.0.0:/home/data/file1.avi"
  // master_uri: e.g. "http://192.168.1.2:8080/rpc/master?codec=json"
  //                  "tcp://192.168.1.2:6542?codec=binary"
  //                  "tcp://0.0.0.0:3456?codec=binary" => use IP from transport layer
  // slave_id: this value must be specified in every NotifyStateChange.
  // Returns: empty string "" on success.
  //          Or an error description on error.
  string AddFile(string file_id, string file_path,
               map<string,string> process_params,
               string master_uri, string slave_id);

  // Delete everything regarding the given 'file_id'.
  // After this call, a subsequent "GetFileState" returns state: NOT_FOUND.
  void DelFile(string file_id);
  
  // Check file state.
  FileState GetFileState(string file_id);
  
  // Returns the status of all files
  array<FileState> ListFiles();
  
  // returns internal state
  string DebugToString();
}

Service MasterManager {
  // Notify file state change. Called by the SlaveManager.
  //input:
  // slave_id: the ID assigned by master, on SlaveManager::Copy and
  //           SlaveManager::Process. Helps master identify slave.
  // state: the new state (includes file identifier).
  void NotifyStateChange(string slave_id, FileState state);
}

//////////////////////////////////////////////////////////////////////////////
//                           Master Control                                 //
//////////////////////////////////////////////////////////////////////////////

// Similar to FileState, but used only for MasterControl reporting
Type FileStateControl {
  // file id; "" indicates a missing file.
  string id_;
  // path to original file, on master
  string path_;
  // the initial process params, given on MasterControl::AddFile
  map<string, string> process_params_;
  // file state. Uses the same names as in FileState.
  string state_;
  // last error description
  string error_;
  // timestamp of the last state change
  bigint ts_state_change_;
  
  // the transcoding progress & status for the input file.
  TranscodingStatus transcoding_status_;
}

//
//  User control over the master manager.
//
Service MasterControl {
  // Start processing a new file.
  //input:
  // id: unique file id
  // path: path to file to be processed. The file is not moved or modified.
  //       Instead it will be copied to slave and processed.
  //returns: nothing
  void AddFile(string file_id, string file_path,
               map<string, string> process_params);
  
  // Completely remove file.
  // erase_original: if true, removes the original file on master.
  //                 else, the original file remains on master.
  // erase_output: if true, removes the distributed files.
  //               else, the output files remain.
  // Applicable to all file states.
  void DelFile(string file_id, bool erase_original,
                               bool erase_output);
                              
  // Get file state.
  FileStateControl GetFileState(string file_id);
  
  // Get the state for all files.
  array<FileStateControl> ListFiles();
}
